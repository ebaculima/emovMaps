/** OpenMapJS 
 *** Copyright(C) 2016 - Marcelo Cajamarca <marcelocaj@gmail.com>
 *** GNU/LGPL v3 License.
 ***/
var app = angular.module("openMapJs", ["ngResource"]);
app.factory("SparqlEndpoint", ["$rootScope", "$http", "$resource",
    function (e, t, $resource)
    {
        var o = null,
                i = function (t) {
                    this.initialize = function () {
                        o = t
                    },
                            this.obtainWkt = function (e) {
                                results = e.results.bindings, angular.forEach(results, function (e, t) {
                                    return strWkt = e.kml.value, strWkt
                                })
                            }, this.requestAllClasses = function () {
                        var getGeometriesQuery = 'PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> '
                                + 'PREFIX geo: <http://www.opengis.net/ont/geosparql#> '
                                + 'SELECT DISTINCT ?class ?label '
                                + ' FROM <http://190.15.132.241/marmotta/context/emov>'
                                + 'WHERE { '
                                + '        ?class rdfs:subClassOf geo:Feature. '
                                + '        Optional { ?class rdfs:label ?label } '
                                + '     } LIMIT ' + e.config.endpoint.maxResults;
                        return this.sendQuery(getGeometriesQuery)
                    }, this.getResultList = function (e) {
                        return e.results.bindings;
                    }, this.sendQuery = function (e) {
                        var t = function (e) {
                            return $.param(e);
                        }, i = $resource(o, {}, {
                            querySrv: {method: "POST", isArray: !1, transformRequest: t, headers: {"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8", Accept: "application/json"}}
                        });
                        return i.querySrv({query: e, output: "json"}).$promise
                    }, this.sendRequest = function (query) {
                        return this.sendQuery(query);
                    }, this.initialize();
                };
        return i;
    }]),
        app.factory("Map", ["$http", function (e) {
                var colors = ["blue", "green", "orange"];
                var t, n = null, o = new ol.source.Vector({}),
                        i = "http://www.opengis.net/def/crs/EPSG/0/",
                        r = null, a = null, b = null,
                        s = document.getElementById("popup"),
                        l = function (e) {
                            this.initialize = function () {
                                t = e, a = new ol.style.Style({
                                    image: new ol.style.Icon({
                                        anchor: [.5, 30], anchorXUnits: "fraction", anchorYUnits: "pixels", src: "http://iconshow.me/media/images/Mixed/small-n-flat-icon/png/32/map-marker.png"})
                                });
                                atropelloStyle = new ol.style.Style({
                                    image: new ol.style.Icon({
                                        anchor: [.5, 30], anchorXUnits: "fraction", anchorYUnits: "pixels", src: "https://dl.dropboxusercontent.com/u/66029573/emov/imagenesServer//map-marker_atropello.png"})
                                });
                                estrellamientoStyle = new ol.style.Style({
                                    image: new ol.style.Icon({
                                        anchor: [.5, 30], anchorXUnits: "fraction", anchorYUnits: "pixels", src: "https://dl.dropboxusercontent.com/u/66029573/emov/imagenesServer/estrellamiento.png"})
                                });
                                choquelateralperpendicularStyle = new ol.style.Style({
                                    image: new ol.style.Icon({
                                        anchor: [.5, 30], anchorXUnits: "fraction", anchorYUnits: "pixels", src: "https://dl.dropboxusercontent.com/u/66029573/emov/imagenesServer/choquelateralperpendicular.png"})
                                });

                                b = new ol.style.Style({
                                    stroke: new ol.style.Stroke({
                                        color: 'green',
                                        width: 1
                                    }),
                                    fill: new ol.style.Fill({
                                        color: 'rgba(' + parseInt((Math.random() * 256)) + ',' + parseInt((Math.random() * 256)) + ', 0, 0.3)'
                                                //       color: colors[parseInt((Math.random() * 3))]
                                    })
                                })

                            }, this.isInt = function (e) {
                                return Number(e) === e && e % 1 === 0
                            }, this.removeFeatures = function (e) {
                                var t = o.getFeatures();
                                angular.forEach(t, function (t, n) {
                                    t.idUriClass == e && o.removeFeature(t);
                                });
                            }, this.graphicQueryResponse = function (e, t) {
                                var r = e.results.bindings, s = this;
                                angular.forEach(r, function (e, n) {
                                    var r = e.wkt.value, l = e.label.value, sa = e.sameAs ? e.sameAs.value : null,
                                            anio = e.anio ? e.anio.value : "",
                                            mes = e.mes ? e.mes.value : "",
                                            dia = e.dia ? e.dia.value : "",
                                            consecuencia = e.consecuencia ? e.consecuencia.value : "",
                                            hora = e.hora ? e.hora.value : "",
                                            parroquia = e.parroquia ? e.parroquia.value : "",
                                            fecha = dia + "/" + mes + "/" + anio,
                                            tipologia = e.tipologia ? e.tipologia.value : "",
                                            direccion = e.direccion ? e.direccion.value : "",
                                            u = r.substr(0, r.indexOf(" ")),
                                            c = r.substr(r.indexOf(" ") + 1),
                                            p = u.substring(i.length + 1, u.length - 1).replace("<" + i).replace(">", ""),
                                            d = new ol.format.WKT, f = null;
                                    f = s.isInt(p) && 4326 != p ? d.readFeature(c, {dataProjection: "EPSG:" + p, featureProjection: "EPSG:4326"}) : d.readFeature(c), f.direccion = direccion, f.tipologia = tipologia, f.consecuencia = consecuencia, f.parroquia = parroquia, f.fecha = fecha, f.hora = hora, f.anio = anio, f.label = l, f.sameAs = sa, f.idUriClass = t;
                                    var g = f.getGeometry().getType();
                                    var pointstyle = a;

                                    if (f.tipologia == "ATROPELLO")
                                    {
                                        pointstyle = atropelloStyle;
                                    }
//                                    if (f.tipologia == "ESTRELLAMIENTO")
//                                    {
//                                        pointstyle = estrellamientoStyle;
//                                    }
//                                     if (f.tipologia == "CHOQUE LATERAL PERPENDICULAR")
//                                    {
//                                        pointstyle = choquelateralperpendicularStyle;
//                                    }
                                    


                                    "Point" == g && f.setStyle(pointstyle), "MultiPolygon" == g && f.setStyle(b), o.addFeature(f)
                                }), n.getView().fit(o.getExtent(), n.getSize());
                                var l = o.getFeatures().length;
                                n.getView().getZoom() > 22 && 5 > l && n.getView().setZoom(17)
                            }, this.removeInfoPopup = function () {
                                $(s).popover("destroy")
                            }, this.createPopupEvents = function () {
                                n.on("pointermove", function (e) {
                                    return e.dragging ? void $(s).popover("destroy") : void 0
                                }), n.on("click", function (e) {
                                    var t = e.coordinate, o = n.forEachFeatureAtPixel(e.pixel, function (e, t) {
                                        return e;
                                    });




                                    if (o) {
                                        r.setPosition(t);
                                        var i = $("div.popover:visible").length > 0, a = "Long: " + t[0] + "<br/> Lat: " + t[1]
                                                + (o.tipologia ? "<br/> Tipologia: " + o.tipologia : "")
                                                + (o.direccion ? "<br/> Direccion: " + o.direccion : "")
                                                + (o.consecuencia ? "<br/> Consecuencia: " + o.consecuencia : "")
                                                + (o.parroquia ? "<br/> Parroquia: " + o.parroquia : "")
                                                + (o.fecha ? "<br/> Fecha: " + o.fecha : "")
                                                + (o.hora ? "<br/> Hora: " + o.hora : "")

                                        i ? ($(s).data("bs.popover").options.content = a, $(s).data("bs.popover").options.title = o.label) : $(s).popover({trigger: "manual", placement: "top", html: !0, title: o.label, container: "body", content: a}), $(s).popover("show")
                                    } else
                                        $(s).popover("destroy")
                                });
                            }, this.updateMapSize = function () {
                                n.updateSize();
                            }, this.createMap = function () {
                                r = new ol.Overlay({element: s, positioning: "bottom-center"}), n = new ol.Map({target: t, overlays: [r], layers: [new ol.layer.Tile({source: new ol.source.OSM}), new ol.layer.Vector({source: o})], view: new ol.View({projection: ol.proj.get("EPSG:4326"), center: [0, 0], zoom: 4, minZoom: 2, maxZoom: 28})}), this.createPopupEvents(), $.getJSON("http://www.geoplugin.net/json.gp?jsoncallback=?", function (e) {
                                    n.getView().setCenter([e.geoplugin_longitude, e.geoplugin_latitude]), n.getView().setZoom(5)
                                });
                            }, this.clearMap = function () {
                                o.clear(!0), this.removeInfoPopup();
                            }, this.getOlMap = function () {
                                return n;
                            }, this.initialize();
                        };
                return l;
            }])
     